<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hduoj on This is DYH</title>
    <link>https://dyhgo.github.io/categories/hduoj/</link>
    <description>Recent content in hduoj on This is DYH</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 Feb 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://dyhgo.github.io/categories/hduoj/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>c&#43;&#43;每种类型的值域</title>
      <link>https://dyhgo.github.io/2020/01/c-%E6%AF%8F%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC%E5%9F%9F/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/c-%E6%AF%8F%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC%E5%9F%9F/</guid>
      <description>#include&amp;lt;iostream&amp;gt; #include&amp;lt;string&amp;gt; #include &amp;lt;limits&amp;gt; using namespace std; int main() { cout &amp;lt;&amp;lt; &amp;quot;type: \t\t&amp;quot; &amp;lt;&amp;lt; &amp;quot;************size**************&amp;quot;&amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; &amp;quot;bool: \t\t&amp;quot; &amp;lt;&amp;lt; &amp;quot;所占字节数：&amp;quot; &amp;lt;&amp;lt; sizeof(bool); cout &amp;lt;&amp;lt; &amp;quot;\t最大值：&amp;quot; &amp;lt;&amp;lt; (numeric_limits&amp;lt;bool&amp;gt;::max)(); cout &amp;lt;&amp;lt; &amp;quo</description>
    </item>
    
    <item>
      <title>extended euclidean algorithm</title>
      <link>https://dyhgo.github.io/2020/01/extended-euclidean-algorithm/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/extended-euclidean-algorithm/</guid>
      <description>#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;int ex_gcd(int a,int b,int&amp;amp; x,int&amp;amp; y){int t,res;if(!b){x=1;y=0;return a;}else{res=ex_gcd(b,a%b,x,y);t=x;x=y;y=t-a/b*y;return res;}}int main(){int a,b,x,y;a=60;b=22;cout&amp;lt;&amp;lt;ex_gcd(a,b,x,y)&amp;lt;&amp;lt;endl;cout&amp;lt;&amp;lt;x&amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;y&amp;lt;&amp;lt;endl;return 0;} </description>
    </item>
    
    <item>
      <title>ford fulkerson algorithm</title>
      <link>https://dyhgo.github.io/2020/01/ford-fulkerson-algorithm/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/ford-fulkerson-algorithm/</guid>
      <description>//O(FE) /* input 5 71 3 63 5 82 5 53 2 31 2 64 1 104 2 24 5output11*/#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;#define maxv 100#define inf 0x3f3f3f3fint v,e;int s,t;struct edge{int to,cap,rev;};vector&amp;lt;edge&amp;gt; G[maxv];bool used[maxv];void add_edge(int from ,int to,int cap){G[from].push_back((edge){to,cap,G[to].size()});G[to].push_back((edge){from,0,G[from].size()-1});}int dfs(int s,int t,int f){if(s==t) return f;used[s]=true;for(int i=0;i&amp;lt;G[s].</description>
    </item>
    
    <item>
      <title>poj3984</title>
      <link>https://dyhgo.github.io/2020/01/poj3984/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/poj3984/</guid>
      <description>迷宫问题 Time Limit: 1000MS Memory Limit: 65536K Description 定义一个二维数组： int maze[5][5] = { 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, }; 它表示一个迷宫，其中的1表示墙壁，0表示</description>
    </item>
    
    <item>
      <title>字符串匹配算法(未完成)</title>
      <link>https://dyhgo.github.io/2020/01/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E6%9C%AA%E5%AE%8C%E6%88%90/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E6%9C%AA%E5%AE%8C%E6%88%90/</guid>
      <description>从学习方法和代码实现debug花了挺长时间。。。 这个算法是从字符串s中找子串p出现的第一个位置 以下是两个常见的字符串匹配算法（还有其他更高效</description>
    </item>
    
    <item>
      <title>筛法求区间内质数个数？</title>
      <link>https://dyhgo.github.io/2020/01/%E7%AD%9B%E6%B3%95%E6%B1%82%E5%8C%BA%E9%97%B4%E5%86%85%E8%B4%A8%E6%95%B0%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/%E7%AD%9B%E6%B3%95%E6%B1%82%E5%8C%BA%E9%97%B4%E5%86%85%E8%B4%A8%E6%95%B0%E4%B8%AA%E6%95%B0/</guid>
      <description>很早以前写的懒得去审查。。。 不知道对不对。。。 Eprime #include&amp;lt;bits/stdc++.h&amp;gt; using namespace std; #define MAX 10000 long long prime1[MAX],num1; long long prime2[MAX],num2; bool isprime1[MAX],isprime2[MAX]; int qprime1(int n) { num1=0; memset(isprime1,1,sizeof(isprime1)); isprime1[0]=isprime1[1]=0; for(int i=2;i&amp;lt;=n;i++) { if(isprime1[i]) { prime1[num1++]=i; for(int j=2;j*i&amp;lt;=n;j++) isprime1[j*i]=0; } } return num1; } int qprime2(int m,int n) { num2=0; qprime1((int)sqrt(n)); memset(isprime2,1,sizeof(isprime2)); for(int i=0;i&amp;lt;num1;i++)</description>
    </item>
    
    <item>
      <title>poj2386</title>
      <link>https://dyhgo.github.io/2020/01/poj2386/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/poj2386/</guid>
      <description>Lake Counting http://poj.org/problem?id=2386 Time Limit: 1000MS Memory Limit: 65536K Description Due to recent rains, water has pooled in various places in Farmer John&amp;rsquo;s field, which is represented by a rectangle of N x M (1 &amp;lt;= N &amp;lt;= 100; 1 &amp;lt;= M &amp;lt;= 100) squares. Each square contains either water (&amp;lsquo;W&amp;rsquo;) or dry land (&#39;.&#39;). Farmer John would like to figure out how many ponds have formed in his field.</description>
    </item>
    
    <item>
      <title>输入输出优化(提高读入输出速度)</title>
      <link>https://dyhgo.github.io/2020/01/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E4%BC%98%E5%8C%96%E6%8F%90%E9%AB%98%E8%AF%BB%E5%85%A5%E8%BE%93%E5%87%BA%E9%80%9F%E5%BA%A6/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E4%BC%98%E5%8C%96%E6%8F%90%E9%AB%98%E8%AF%BB%E5%85%A5%E8%BE%93%E5%87%BA%E9%80%9F%E5%BA%A6/</guid>
      <description>参考https://blog.csdn.net/weixin_43960287/article/details/85337291 1.用sca</description>
    </item>
    
  </channel>
</rss>
