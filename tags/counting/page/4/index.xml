<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>counting on This is DYH</title>
    <link>https://dyhgo.github.io/tags/counting/</link>
    <description>Recent content in counting on This is DYH</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 11 May 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://dyhgo.github.io/tags/counting/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>poj1182</title>
      <link>https://dyhgo.github.io/2020/02/poj1182/</link>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/02/poj1182/</guid>
      <description>食物链 Time Limit: 1000MS Memory Limit: 10000K Description 动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B， B吃C，C吃A。 现有N个动物，以1－N编号。</description>
    </item>
    
    <item>
      <title>poj2187</title>
      <link>https://dyhgo.github.io/2020/01/poj2187/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/poj2187/</guid>
      <description>Beauty Contest Time Limit: 3000MS Memory Limit: 65536K Description Bessie, Farmer John&amp;rsquo;s prize cow, has just won first place in a bovine beauty contest, earning the title &amp;lsquo;Miss Cow World&amp;rsquo;. As a result, Bessie will make a tour of N (2 &amp;lt;= N &amp;lt;= 50,000) farms around the world in order to spread goodwill between farmers and their cows. For simplicity, the world will be represented as a two-dimensional plane,</description>
    </item>
    
    <item>
      <title>poj2932</title>
      <link>https://dyhgo.github.io/2020/01/poj2932/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/poj2932/</guid>
      <description>Coneology 题目链接 Time Limit: 5000MS Memory Limit: 65536K Description A student named Round Square loved to play with cones. He would arrange cones with different base radii arbitrarily on the floor and would admire the intrinsic beauty of the arrangement. The student even began theorizing about how some cones dominate other cones: a cone A dominates another cone B when cone B is completely within the cone</description>
    </item>
    
    <item>
      <title>poj1127</title>
      <link>https://dyhgo.github.io/2020/01/poj1127/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/poj1127/</guid>
      <description>Jack Straws Time Limit: 1000MS Memory Limit: 10000K Description In the game of Jack Straws, a number of plastic or wooden &amp;ldquo;straws&amp;rdquo; are dumped on the table and players try to remove them one-by-one without disturbing the other straws. Here, we are only concerned with if various pairs of straws are connected by a path of touching straws. You will be given a list of the endpoints for some straws</description>
    </item>
    
    <item>
      <title>简易对拍</title>
      <link>https://dyhgo.github.io/2020/01/%E7%AE%80%E6%98%93%E5%AF%B9%E6%8B%8D/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/%E7%AE%80%E6%98%93%E5%AF%B9%E6%8B%8D/</guid>
      <description>以这道题为例 准备一个对拍的文件夹，里面装这些东西 duipai_random_input_src.cpp是产生随机测试数据的代码 #include&amp;lt;cstdlib&amp;gt; #include&amp;lt;iostream&amp;gt; #include&amp;lt;ctime&amp;gt; using namespace std; int</description>
    </item>
    
    <item>
      <title>abc152-D</title>
      <link>https://dyhgo.github.io/2020/01/abc152-d/</link>
      <pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/abc152-d/</guid>
      <description>题目链接 题意：找正整数对（A,B），A、B都不大于N，满足A的第一个数字是B的最后一个数 字，B的第一个数字是A的最后一个数字，个位数也算，输</description>
    </item>
    
    <item>
      <title>poj1384</title>
      <link>https://dyhgo.github.io/2020/01/poj1384/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/poj1384/</guid>
      <description>Piggy-Bank Time Limit: 1000MS Memory Limit: 10000K 题目链接 Description Before ACM can do anything, a budget must be prepared and the necessary financial support obtained. The main income for this action comes from Irreversibly Bound Money (IBM). The idea behind is simple. Whenever some ACM member has any small money, he takes all the coins and throws them into a piggy-bank. You know that this process is</description>
    </item>
    
    <item>
      <title>poj3624</title>
      <link>https://dyhgo.github.io/2020/01/poj3624/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/poj3624/</guid>
      <description>Charm Bracelet Time Limit: 1000MS Memory Limit: 65536K Description Bessie has gone to the mall&amp;rsquo;s jewelry store and spies a charm bracelet. Of course, she&amp;rsquo;d like to fill it with the best charms possible from the N (1 ≤ N ≤ 3,402) available charms. Each charm i in the supplied list has a weight Wi (1 ≤ Wi ≤ 400), a &amp;lsquo;desirability&amp;rsquo; factor Di (1 ≤ Di ≤ 100), and</description>
    </item>
    
    <item>
      <title>排序算法的时间复杂度</title>
      <link>https://dyhgo.github.io/2020/01/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>时间复杂度与计算时间的关系</title>
      <link>https://dyhgo.github.io/2020/01/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%97%B6%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%97%B6%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</guid>
      <description></description>
    </item>
    
    <item>
      <title>poj3069</title>
      <link>https://dyhgo.github.io/2020/01/poj3069/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/poj3069/</guid>
      <description>Saruman&amp;rsquo;s Army Time Limit: 1000MS Memory Limit: 65536K 题目链接 Description Saruman the White must lead his army along a straight path from Isengard to Helm’s Deep. To keep track of his forces, Saruman distributes seeing stones, known as palantirs, among the troops. Each palantir has a maximum effective range of R units, and must be carried by some troop in the army</description>
    </item>
    
    <item>
      <title>poj3617</title>
      <link>https://dyhgo.github.io/2020/01/poj3617/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/poj3617/</guid>
      <description>Best Cow Line Time Limit: 1000MS Memory Limit: 65536K 题目链接 Description FJ is about to take his N (1 ≤ N ≤ 2,000) cows to the annual&amp;quot;Farmer of the Year&amp;rdquo; competition. In this contest every farmer arranges his cows in a line and herds them past the judges. The contest organizers adopted a new registration scheme this year: simply register the initial letter of every cow in</description>
    </item>
    
    <item>
      <title>c&#43;&#43;交集、并集、差、对称差函数</title>
      <link>https://dyhgo.github.io/2020/01/c-%E4%BA%A4%E9%9B%86%E5%B9%B6%E9%9B%86%E5%B7%AE%E5%AF%B9%E7%A7%B0%E5%B7%AE%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/c-%E4%BA%A4%E9%9B%86%E5%B9%B6%E9%9B%86%E5%B7%AE%E5%AF%B9%E7%A7%B0%E5%B7%AE%E5%87%BD%E6%95%B0/</guid>
      <description>#include&amp;lt;iostream&amp;gt; #include&amp;lt;set&amp;gt; //#include&amp;lt;map&amp;gt; //#include&amp;lt;string&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;iterator&amp;gt; using namespace std; int main() { int a[]={3,2,1}; int b[]={3,4,5,6}; set&amp;lt;int&amp;gt; s1(a,a+3); set&amp;lt;int&amp;gt; s2(b,b+4); set&amp;lt;int&amp;gt; s3; set_union(s1.begin(),s1.end(),s2.begin(),s2.end(),inserter(s3,s3.begin())); for(set&amp;lt;int&amp;gt;::iterator it=s3.begin();it!=s3.end();it++) cout&amp;lt;&amp;lt;*it&amp;lt;&amp;lt;&amp;quot; &amp;quot;; cout&amp;lt;&amp;lt;endl; set_union(s1.begin(),s1.end(),s2.begin(),s2.end(),ostream_iterator&amp;lt;int&amp;gt;(cout,&amp;quot;*&amp;quot;)); cout&amp;lt;&amp;lt;endl; set_intersection(s1.begin(),s1.end(),s2.begin(),s2.end(),ostream_iterator&amp;lt;int&amp;gt;(cout,&amp;quot; &amp;quot;)); cout&amp;lt;&amp;lt;endl; set_difference(s1.begin(),s1.end(),s2.begin(),s2.end(),ostream_iterator&amp;lt;int&amp;gt;(cout,&amp;quot; &amp;quot;)); cout&amp;lt;&amp;lt;endl; set_symmetric_difference(s1.begin(),s1.end(),s2.begin(),s2.end(),ostream_iterator&amp;lt;int&amp;gt;(cout,&amp;quot; &amp;quot;)); return 0; }</description>
    </item>
    
    <item>
      <title>c&#43;&#43;每种类型的值域</title>
      <link>https://dyhgo.github.io/2020/01/c-%E6%AF%8F%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC%E5%9F%9F/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/c-%E6%AF%8F%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC%E5%9F%9F/</guid>
      <description>#include&amp;lt;iostream&amp;gt; #include&amp;lt;string&amp;gt; #include &amp;lt;limits&amp;gt; using namespace std; int main() { cout &amp;lt;&amp;lt; &amp;quot;type: \t\t&amp;quot; &amp;lt;&amp;lt; &amp;quot;************size**************&amp;quot;&amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; &amp;quot;bool: \t\t&amp;quot; &amp;lt;&amp;lt; &amp;quot;所占字节数：&amp;quot; &amp;lt;&amp;lt; sizeof(bool); cout &amp;lt;&amp;lt; &amp;quot;\t最大值：&amp;quot; &amp;lt;&amp;lt; (numeric_limits&amp;lt;bool&amp;gt;::max)(); cout &amp;lt;&amp;lt; &amp;quo</description>
    </item>
    
    <item>
      <title>extended euclidean algorithm</title>
      <link>https://dyhgo.github.io/2020/01/extended-euclidean-algorithm/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/extended-euclidean-algorithm/</guid>
      <description>#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;int ex_gcd(int a,int b,int&amp;amp; x,int&amp;amp; y){int t,res;if(!b){x=1;y=0;return a;}else{res=ex_gcd(b,a%b,x,y);t=x;x=y;y=t-a/b*y;return res;}}int main(){int a,b,x,y;a=60;b=22;cout&amp;lt;&amp;lt;ex_gcd(a,b,x,y)&amp;lt;&amp;lt;endl;cout&amp;lt;&amp;lt;x&amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;y&amp;lt;&amp;lt;endl;return 0;} </description>
    </item>
    
    <item>
      <title>ford fulkerson algorithm</title>
      <link>https://dyhgo.github.io/2020/01/ford-fulkerson-algorithm/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/ford-fulkerson-algorithm/</guid>
      <description>//O(FE) /* input 5 71 3 63 5 82 5 53 2 31 2 64 1 104 2 24 5output11*/#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;#define maxv 100#define inf 0x3f3f3f3fint v,e;int s,t;struct edge{int to,cap,rev;};vector&amp;lt;edge&amp;gt; G[maxv];bool used[maxv];void add_edge(int from ,int to,int cap){G[from].push_back((edge){to,cap,G[to].size()});G[to].push_back((edge){from,0,G[from].size()-1});}int dfs(int s,int t,int f){if(s==t) return f;used[s]=true;for(int i=0;i&amp;lt;G[s].</description>
    </item>
    
    <item>
      <title>poj3984</title>
      <link>https://dyhgo.github.io/2020/01/poj3984/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/poj3984/</guid>
      <description>迷宫问题 Time Limit: 1000MS Memory Limit: 65536K Description 定义一个二维数组： int maze[5][5] = { 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, }; 它表示一个迷宫，其中的1表示墙壁，0表示</description>
    </item>
    
    <item>
      <title>字符串匹配算法(未完成)</title>
      <link>https://dyhgo.github.io/2020/01/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E6%9C%AA%E5%AE%8C%E6%88%90/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E6%9C%AA%E5%AE%8C%E6%88%90/</guid>
      <description>从学习方法和代码实现debug花了挺长时间。。。 这个算法是从字符串s中找子串p出现的第一个位置 以下是两个常见的字符串匹配算法（还有其他更高效</description>
    </item>
    
    <item>
      <title>筛法求区间内质数个数？</title>
      <link>https://dyhgo.github.io/2020/01/%E7%AD%9B%E6%B3%95%E6%B1%82%E5%8C%BA%E9%97%B4%E5%86%85%E8%B4%A8%E6%95%B0%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/%E7%AD%9B%E6%B3%95%E6%B1%82%E5%8C%BA%E9%97%B4%E5%86%85%E8%B4%A8%E6%95%B0%E4%B8%AA%E6%95%B0/</guid>
      <description>很早以前写的懒得去审查。。。 不知道对不对。。。 Eprime #include&amp;lt;bits/stdc++.h&amp;gt; using namespace std; #define MAX 10000 long long prime1[MAX],num1; long long prime2[MAX],num2; bool isprime1[MAX],isprime2[MAX]; int qprime1(int n) { num1=0; memset(isprime1,1,sizeof(isprime1)); isprime1[0]=isprime1[1]=0; for(int i=2;i&amp;lt;=n;i++) { if(isprime1[i]) { prime1[num1++]=i; for(int j=2;j*i&amp;lt;=n;j++) isprime1[j*i]=0; } } return num1; } int qprime2(int m,int n) { num2=0; qprime1((int)sqrt(n)); memset(isprime2,1,sizeof(isprime2)); for(int i=0;i&amp;lt;num1;i++)</description>
    </item>
    
    <item>
      <title>poj2386</title>
      <link>https://dyhgo.github.io/2020/01/poj2386/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyhgo.github.io/2020/01/poj2386/</guid>
      <description>Lake Counting http://poj.org/problem?id=2386 Time Limit: 1000MS Memory Limit: 65536K Description Due to recent rains, water has pooled in various places in Farmer John&amp;rsquo;s field, which is represented by a rectangle of N x M (1 &amp;lt;= N &amp;lt;= 100; 1 &amp;lt;= M &amp;lt;= 100) squares. Each square contains either water (&amp;lsquo;W&amp;rsquo;) or dry land (&#39;.&#39;). Farmer John would like to figure out how many ponds have formed in his field.</description>
    </item>
    
  </channel>
</rss>
