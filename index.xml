<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>This is DYH</title>
        <link>https://dyhgo.github.io/</link>
        <description>这是一个网站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>244882973@qq.com (DYH)</managingEditor>
            <webMaster>244882973@qq.com (DYH)</webMaster><lastBuildDate>Wed, 26 Feb 2020 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="https://dyhgo.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>李群与李代数</title>
    <link>https://dyhgo.github.io/%E6%9D%8E%E7%BE%A4%E4%B8%8E%E6%9D%8E%E4%BB%A3%E6%95%B0/</link>
    <pubDate>Sat, 07 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://dyhgo.github.io/%E6%9D%8E%E7%BE%A4%E4%B8%8E%E6%9D%8E%E4%BB%A3%E6%95%B0/</guid>
    <description><![CDATA[群 与视觉slam有关的群 三维旋转矩阵构成了特殊正交群(special orthogonal group) $$S O(3)=\left\{R \in \mathbb{R}^{3 \times 3} \mid R R^{T}=I, \operatorname{det}(R)=1\right\}$$ 三维变换矩阵构成了特殊欧氏群（special euclidean g]]></description>
</item><item>
    <title>三维空间的刚体运动</title>
    <link>https://dyhgo.github.io/%E4%B8%89%E7%BB%B4%E7%A9%BA%E9%97%B4%E7%9A%84%E5%88%9A%E4%BD%93%E8%BF%90%E5%8A%A8/</link>
    <pubDate>Fri, 23 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://dyhgo.github.io/%E4%B8%89%E7%BB%B4%E7%A9%BA%E9%97%B4%E7%9A%84%E5%88%9A%E4%BD%93%E8%BF%90%E5%8A%A8/</guid>
    <description><![CDATA[内积与外积 内积 外积 定义 ^ 符号 欧氏变换 euclidean transform 单次欧氏变换 同一个向量在两个坐标系中的表示，坐标系的变换包括一次旋转和一次平移 旋转 R为旋转矩阵（ro]]></description>
</item><item>
    <title>今天你也要来点cmake吗</title>
    <link>https://dyhgo.github.io/%E4%BB%8A%E5%A4%A9%E4%BD%A0%E4%B9%9F%E8%A6%81%E6%9D%A5%E7%82%B9cmake%E5%90%97/</link>
    <pubDate>Tue, 06 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://dyhgo.github.io/%E4%BB%8A%E5%A4%A9%E4%BD%A0%E4%B9%9F%E8%A6%81%E6%9D%A5%E7%82%B9cmake%E5%90%97/</guid>
    <description><![CDATA[前言 很早就想写cmake，但是一直懒得写 今天也随便写点cmake 官方对cmake的解释 CMake is an open-source, cross-platform family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform]]></description>
</item><item>
    <title>Codeforces Round #672 (Div. 2) A~D</title>
    <link>https://dyhgo.github.io/codeforces-round-672-div.-2-a-~-d/</link>
    <pubDate>Fri, 25 Sep 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://dyhgo.github.io/codeforces-round-672-div.-2-a-~-d/</guid>
    <description><![CDATA[A. Cubes Sorting 题意 对于一个数列，每次操作交换相邻的两个数，问是否需要达到n(n-1)/2次操作才可以让数列递增 题解 判断数列是否严格单调递减 1 2 3 4 5]]></description>
</item><item>
    <title>FFT &amp; NTT</title>
    <link>https://dyhgo.github.io/fft-ntt/</link>
    <pubDate>Thu, 24 Sep 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://dyhgo.github.io/fft-ntt/</guid>
    <description><![CDATA[前言 一篇没什么用的文章，记录一下FFT和NTT的板子 fft和ntt的原理参考FFT &amp; NTT 概述 fft和ntt差不多，基础用法就是加速多项式乘法，]]></description>
</item><item>
    <title>无聊的做题记录</title>
    <link>https://dyhgo.github.io/%E6%97%A0%E8%81%8A%E7%9A%84%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
    <pubDate>Sun, 06 Sep 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://dyhgo.github.io/%E6%97%A0%E8%81%8A%E7%9A%84%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
    <description><![CDATA[数学公式 题目 题解 错排公式 Dn = floor(n!/e + 0.5) = (n - 1) * (Dn-1 + Dn-2) D1 = 0 , D2 = 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 //457ms/1000ms 488k/32768k #include &#34;bits/stdc++.h&#34; using namespace std; using ll = long long; const ll mod = 998244353; int main()]]></description>
</item><item>
    <title>abc173</title>
    <link>https://dyhgo.github.io/abc173/</link>
    <pubDate>Mon, 06 Jul 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://dyhgo.github.io/abc173/</guid>
    <description><![CDATA[A - Payment 题解 1 2 3 4 5 6 7 8 9 10 11 12 #include&lt;bits/stdc++.h&gt; using namespace std; int main(){ int n; cin&gt;&gt;n; int i=1000; while(i&lt;n){ i+=1000; } cout&lt;&lt;i-n; return 0; } B - Judge Status Summary 题解 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28]]></description>
</item><item>
    <title>某不科学的暑假做题记录</title>
    <link>https://dyhgo.github.io/%E6%9F%90%E4%B8%8D%E7%A7%91%E5%AD%A6%E7%9A%84%E6%9A%91%E5%81%87%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
    <pubDate>Sat, 04 Jul 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://dyhgo.github.io/%E6%9F%90%E4%B8%8D%E7%A7%91%E5%AD%A6%E7%9A%84%E6%9A%91%E5%81%87%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
    <description><![CDATA[简单思维 题目 题解 直接法，注意数组大小爆long long 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include&lt;bits/stdc++.h&gt; using ll = long long; const ll mod = 1e6+3; ll fac[mod+2]; int main(){ fac[0] = 1LL; fac[1] = 1LL; for(ll i=2;i&lt;mod+2;i++){ fac[i] = i*fac[i-1]; fac[i]]]></description>
</item><item>
    <title>abc172</title>
    <link>https://dyhgo.github.io/abc172/</link>
    <pubDate>Sun, 28 Jun 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://dyhgo.github.io/abc172/</guid>
    <description><![CDATA[A - Calc 题意 看题目 题解 1 2 3 4 5 6 7 8 9 #include&lt;bits/stdc++.h&gt; using namespace std; using ll = long long; int main(){ int a; cin&gt;&gt;a; cout&lt;&lt;a+a*a+a*a*a&lt;&lt;endl; return 0; } B - Minor Change 题意 看题目 题解 1 2 3 4 5 6 7 8 9 10 11 12 13 #include&lt;bits/stdc++.h&gt; using namespace std; using ll = long long;]]></description>
</item><item>
    <title>西南科技大学第十六届ACM程序设计竞赛暨绵阳市邀请赛</title>
    <link>https://dyhgo.github.io/%E8%A5%BF%E5%8D%97%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E5%85%AD%E5%B1%8Aacm%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E6%9A%A8%E7%BB%B5%E9%98%B3%E5%B8%82%E9%82%80%E8%AF%B7%E8%B5%9B/</link>
    <pubDate>Sun, 28 Jun 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://dyhgo.github.io/%E8%A5%BF%E5%8D%97%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E5%85%AD%E5%B1%8Aacm%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E6%9A%A8%E7%BB%B5%E9%98%B3%E5%B8%82%E9%82%80%E8%AF%B7%E8%B5%9B/</guid>
    <description><![CDATA[挺好的比赛 A-找规律 题解 玄学题，打表找规律或者猜测规则是每次洗牌是将一个位置移动到另一个固定位置 13次洗牌之后所有的位置都占过一遍，所以13]]></description>
</item></channel>
</rss>
